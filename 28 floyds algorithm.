#include <stdio.h>
#include <limits.h>

#define MAX_N 100

void floydWarshall(int graph[][MAX_N], int n) {
    int dist[MAX_N][MAX_N], next[MAX_N][MAX_N];

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            dist[i][j] = graph[i][j];
            next[i][j] = (i == j) ? i : -1; // Initialize next to itself for diagonal elements
        }
    }

    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX && dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                    next[i][j] = next[k][j]; // Update next node for shortest path
                }
            }
        }
    }

    for (int i = 0; i < n; i++) {
        if (dist[i][i] < 0) {
            printf("Graph contains a negative cycle.\n");
            return;
        }
    }

    printf("Shortest distances between all pairs:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (dist[i][j] == INT_MAX) {
                printf("INF "); // Print "INF" for unreachable nodes
            } else {
                printf("%d ", dist[i][j]);
            }
        }
        printf("\n");
    }

    printf("\nNext hop table:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", next[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int graph[MAX_N][MAX_N] = {
        {0, 3, INF, 7},
        {INF, 0, 4, 1},
        {1, INF, 0, 5},
        {2, INF, INF, 0}
    };
    int n = sizeof(graph[0]) / sizeof(graph[0][0]); // Number of vertices

    floydWarshall(graph, n);

    return 0;
}
 
