#include <stdio.h>
#include <limits.h>

#define MAX_N 100
void constructOptimalBST(int keys[], int freq[], int n, int cost[][MAX_N], int root[][MAX_N]) {
    for (int i = 0; i < n; i++) {
        cost[i][i] = freq[i];
        root[i][i] = i;
    }
    for (int l = 2; l <= n; l++) {
        for (int i = 0; i <= n - l; i++) {
            int j = i + l - 1;

            int min_cost = INT_MAX;
            int best_root = -1;
            for (int k = i; k <= j; k++) {
                int left_cost = (k > i) ? cost[i][k - 1] : 0;
                int right_cost = (k < j) ? cost[k + 1][j] : 0;

                int potential_cost = left_cost + right_cost + freq[k];

                if (potential_cost < min_cost) {
                    min_cost = potential_cost;
                    best_root = k;
                }
            }

            cost[i][j] = min_cost;
            root[i][j] = best_root;
        }
    }
}
void printOptimalBST(int keys[], int root[][MAX_N], int i, int j) {
    if (i > j) {
        return;
    }

    printf("%d ", keys[root[i][j]]);

    printOptimalBST(keys, root, i, root[i][j] - 1);
    printOptimalBST(keys, root, root[i][j] + 1, j);
}

int main() {
    int keys[] = {10, 20, 30};
    int freq[] = {4, 2, 6};
    int n = sizeof(keys) / sizeof(keys[0]);

    int cost[MAX_N][MAX_N], root[MAX_N][MAX_N];

    constructOptimalBST(keys, freq, n, cost, root);

    printf("Optimal Binary Search Tree: ");
    printOptimalBST(keys, root, 0, n - 1);
    printf("\n");

    return 0;
} 
