#include <stdio.h>
#include <limits.h>

#define MAX_N 50 

int minCostAssignment(int cost[][MAX_N], int n, int row, bool assigned[]) {
    int min_cost = INT_MAX;
    int min_idx = -1;

    for (int col = 0; col < n; col++) {
        if (!assigned[col] && cost[row][col] < min_cost) {
            min_cost = cost[row][col];
            min_idx = col;
        }
    }

    if (min_idx != -1) {
        assigned[min_idx] = true; 
        for (int i = 0; i < n; i++) {
            if (!assigned[i]) {
                cost[row][i] -= min_cost; 
            }
        }

        int min_cost_recurse = minCostAssignment(cost, n, row + 1, assigned);
        min_cost = min(min_cost, min_cost_recurse); 

        assigned[min_idx] = false;
        for (int i = 0; i < n; i++) {
            if (!assigned[i]) {
                cost[row][i] += min_cost; 
            }
        }
    }

    return min_cost;
}

int assignmentProblem(int cost[][MAX_N], int n) {
    bool assigned[MAX_N] = {false};

    int min_cost = minCostAssignment(cost, n, 0, assigned);

    return min_cost;
}

int main() {
    /*
    Example cost matrix (modify as needed):
                  0  2  4
                1  3  1
               2  1  0
    */
    int cost[][MAX_N] = {
        {0, 2, 4},
        {1, 3, 1},
        {2, 1, 0}
    };
    int n = sizeof(cost[0]) / sizeof(cost[0][0]);

    int min_cost = assignmentProblem(cost, n);

    printf("Minimum cost of assignment: %d\n", min_cost);

    return 0;
} 
